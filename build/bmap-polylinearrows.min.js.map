{"version":3,"file":"bmap-polylinearrows.min.js","sources":["../src/utils/defaultValue.js","../src/core/PolylineArrows.js"],"sourcesContent":["/**\n * Returns the first parameter if not undefined, otherwise the second parameter.\n * Useful for setting a default value for a parameter.\n *\n * @function\n *\n * @param {*} a\n * @param {*} b\n * @returns {*} Returns the first parameter if not undefined, otherwise the second parameter.\n *\n * @example\n * param = Cesium.defaultValue(param, 'default');\n */\n function defaultValue(a, b) {\n    if (a !== undefined && a !== null) {\n      return a;\n    }\n    return b;\n  }\n  \n  /**\n   * A frozen empty object that can be used as the default value for options passed as\n   * an object literal.\n   * @type {Object}\n   * @memberof defaultValue\n   */\n  defaultValue.EMPTY_OBJECT = Object.freeze({});\n  \n  export default defaultValue;","import defaultValue from '../utils/defaultValue';\n\nclass PolylineArrows {\n    constructor(mapType, map, data, icon, opts = {}) {\n        // 参数\n        this.mapType = mapType;\n        this.map = map\n        this.data = data;\n        this.icon = icon;\n        this.step = defaultValue(opts.step, 90);\n        this.iconSize = defaultValue(opts.iconSize, { x: 12, y: 12 });\n        this.correctAngle = defaultValue(opts.correctAngle, 0);\n\n        // 私有变量\n        this.lines = [];\n        this.arrowOverlays = [];\n        this.arrowGeojsonArr = [];\n        this.moveendHandlerFunc = null;\n        this.zoomendHandlerFunc = null;\n\n        this.parseLineData();\n        this.initRefreshEvent();\n    }\n\n    /**\n     * 解析线路数据\n     */\n    parseLineData() {\n        let geo = this.data.geometry;\n        if (!geo) return;\n\n        let { type } = geo;\n        switch (type) {\n            case 'LineString':\n                this.lines = geo.coordinates;\n                break;\n            case 'MultiLineString':\n                this.lines = geo.coordinates.flat();\n                break;\n            default:\n                console.error('error polyline data!');\n                break;\n        }\n    }\n\n    /**\n     * 初始化箭头更新事件\n     * 地图平移和缩放结束时触发\n     */\n    initRefreshEvent() {\n        this.moveendHandlerFunc = this.moveendHandler.bind(this);\n        this.zoomendHandlerFunc = this.zoomendHandler.bind(this);\n\n        if (this.lines && this.lines.length > 1) {\n            this.map.addEventListener('moveend', this.moveendHandlerFunc);\n            this.map.addEventListener('zoomend', this.zoomendHandlerFunc);\n        }\n    }\n\n    /**\n     * 地图平移结束事件处理\n     */\n    moveendHandler() {\n        this.dispatchArrows();\n    }\n\n    /**\n     * 地图缩放结束事件处理\n     */\n    zoomendHandler() {\n        this.dispatchArrows();\n    }\n\n    /**\n    * 箭头绘制调度中心\n    */\n    dispatchArrows() {\n        let that = this;\n\n        // 每次更新前先清空所有箭头数据\n        that.clearArrows();\n\n        let step = that.step;\n        let sylength = 0;\n        let currrentLength = 0;\n        let currentStart = that.pointToPixel(that.lines[0][0], that.lines[0][1]);\n        let arrowNode = {};\n        that.lines.map((val, index) => {\n            if (index !== that.lines.length - 1) {\n                let start = that.pointToPixel(val[0], val[1]);\n                let end = that.pointToPixel(that.lines[index + 1][0], that.lines[index + 1][1]);\n                let [dx, dy] = [end.x - start.x, start.y - end.y];\n                if (dx !== 0 || dy !== 0) {\n                    // 都为0意味着折线中节点太近，忽略这段距离\n                    let rotation = Math.atan2(dy, dx);\n                    let nodeDistance;\n                    if (rotation === 0) {\n                        nodeDistance = dx;\n                    } else {\n                        nodeDistance = dy / Math.sin(rotation);\n                    }\n\n                    if (Number(nodeDistance) < Number(step - currrentLength)) {\n                        // 间距过短\n                        currrentLength += nodeDistance;\n                        currentStart = end;\n                    } else {\n                        if (currrentLength == 0) {\n                            sylength = nodeDistance % step;\n                            let splitNum = Math.floor(nodeDistance / step);\n                            let Y = -Math.sin(rotation) * step;\n                            let X = Math.cos(rotation) * step;\n                            for (let i = 0; i < splitNum; i++) {\n                                arrowNode.x = currentStart.x + X;\n                                arrowNode.y = currentStart.y + Y;\n                                currentStart = arrowNode;\n\n                                that.addArrow(arrowNode, rotation);\n                            }\n                            currrentLength = sylength;\n                            currentStart = end;\n                        } else {\n                            let littleStep = step - currrentLength;\n                            let Y = -Math.sin(rotation) * littleStep;\n                            let X = Math.cos(rotation) * littleStep;\n                            arrowNode.x = currentStart.x + X;\n                            arrowNode.y = currentStart.y + Y;\n                            currentStart = arrowNode;\n\n                            that.addArrow(arrowNode, rotation);\n\n                            sylength = (nodeDistance - littleStep) % step;\n                            let splitNum = Math.floor((nodeDistance - littleStep) / step);\n                            Y = -Math.sin(rotation) * step;\n                            X = Math.cos(rotation) * step;\n                            for (let i = 0; i < splitNum; i++) {\n                                arrowNode.x = currentStart.x + X;\n                                arrowNode.y = currentStart.y + Y;\n                                currentStart = arrowNode;\n\n                                that.addArrow(arrowNode, rotation);\n                            }\n                            currrentLength = sylength;\n                            currentStart = end;\n                        }\n                    }\n                }\n            }\n        });\n    }\n\n    /**\n     * 新增箭头\n     * @param arrowNode 箭头对象\n     * @param rotation 旋转角度\n     */\n    addArrow(arrowNode, rotation) {\n        let seeExtent = this.map.getBounds();\n        let arrowPoint = this.pixelToPoint(arrowNode.x, arrowNode.y);\n\n        // 仅在屏幕可视区域内加载\n        if (seeExtent.containsPoint(arrowPoint)) {\n            let currrentAngle = (rotation / Math.PI) * 180 - this.correctAngle;\n            this.drawArrow(arrowPoint, -currrentAngle);\n        }\n    }\n\n\n    /**\n     * 使用百度地图API绘制箭头\n     * @param arrowPoint 箭头像素坐标\n     * @param rotation 旋转角度\n     */\n    drawArrow(arrowPoint, rotation) {\n        let marker = this.createMarker(arrowPoint);\n        marker.setRotation(rotation);\n\n        this.map.addOverlay(marker);\n        this.arrowOverlays.push(marker);\n    }\n\n\n    /**\n     * 清除箭头\n     */\n    clearArrows() {\n        this.arrowOverlays.forEach((overlay) => {\n            this.map.removeOverlay(overlay);\n        });\n\n        this.arrowOverlays = [];\n    }\n\n    /**\n     * 设置箭头可见性\n     * @param visible 可见性\n     */\n    setArrowsVisible(visible) {\n        this.arrowOverlays.forEach((overlay) => {\n            if (visible) {\n                overlay.show();\n            } else {\n                overlay.hide();\n            }\n        });\n    }\n\n    /**\n     * 更新箭头数据\n     * @param newData 新箭头数据\n     */\n    updateData(newData) {\n        this.data = newData;\n        this.parseLineData();\n        this.clearArrows();\n        this.dispatchArrows();\n    }\n\n    /**\n     * 经纬度坐标转屏幕坐标\n     * @param lng 经度\n     * @param lat 纬度\n     */\n    pointToPixel(lng, lat) {\n        let pixel;\n        switch (this.mapType) {\n            case 'BMap':\n                pixel = this.map.pointToPixel(new BMap.Point(lng, lat));\n                break;\n            case 'BMapGL':\n                pixel = this.map.pointToPixel(new BMapGL.Point(lng, lat));\n                break;\n            default:\n                console.log(`请输入正确的地图构造函数：['BMap','BMapGL']中的一种！`);\n                break;\n        }\n\n        return pixel;\n    }\n\n    /**\n    * 屏幕坐标转经纬度坐标\n    * @param x 屏幕坐标x\n    * @param y 屏幕坐标y\n    */\n    pixelToPoint(x, y) {\n        let point;\n        switch (this.mapType) {\n            case 'BMap':\n                point = this.map.pixelToPoint(new BMap.Pixel(x, y));\n                break;\n            case 'BMapGL':\n                point = this.map.pixelToPoint(new BMapGL.Pixel(x, y));\n                break;\n            default:\n                console.log(`请输入正确的地图构造函数：['BMap','BMapGL']中的一种！`);\n                break;\n        }\n\n        return point;\n    }\n\n    /**\n     * 创建marker\n     * @param icon 图标\n     * @param point 坐标点\n     */\n    createMarker(point) {\n        let myIcon;\n        let marker;\n        switch (this.mapType) {\n            case 'BMap':\n                myIcon = new BMap.Icon(this.icon, new BMap.Size(this.iconSize.x, this.iconSize.y));\n                marker = new BMap.Marker(point, {\n                    icon: myIcon,\n                });\n                break;\n            case 'BMapGL':\n                myIcon = new BMapGL.Icon(this.icon, new BMapGL.Size(this.iconSize.x, this.iconSize.y));\n                marker = new BMapGL.Marker(point, {\n                    icon: myIcon,\n                });\n                break;\n            default:\n                console.log(`请输入正确的地图构造函数：['BMap','BMapGL']中的一种！`);\n                break;\n        }\n\n        return marker;\n    }\n\n    /**\n    * 析构函数\n    */\n    destory() {\n        this.clearArrows();\n\n        this.map.removeEventListener('moveend', this.moveendHandlerFunc);\n        this.map.removeEventListener('zoomend', this.zoomendHandlerFunc);\n    }\n}\n\nexport default PolylineArrows;"],"names":["defaultValue","a","b","EMPTY_OBJECT","Object","freeze","mapType","map","data","icon","opts","step","iconSize","x","y","correctAngle","lines","arrowOverlays","arrowGeojsonArr","moveendHandlerFunc","zoomendHandlerFunc","parseLineData","initRefreshEvent","geo","this","geometry","type","coordinates","flat","console","error","moveendHandler","bind","zoomendHandler","length","addEventListener","dispatchArrows","that","clearArrows","sylength","currrentLength","currentStart","pointToPixel","arrowNode","val","index","start","end","dx","dy","rotation","Math","atan2","nodeDistance","sin","Number","splitNum","floor","Y","X","cos","i","addArrow","littleStep","seeExtent","getBounds","arrowPoint","pixelToPoint","containsPoint","currrentAngle","PI","drawArrow","marker","createMarker","setRotation","addOverlay","push","forEach","overlay","_this","removeOverlay","visible","show","hide","newData","lng","lat","pixel","BMap","Point","BMapGL","log","point","Pixel","myIcon","Icon","Size","Marker","removeEventListener"],"mappings":"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"}